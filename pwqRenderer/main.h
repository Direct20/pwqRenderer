//////////////////////////////////////////////////////////////////////////////
//main.h - 主文件
//////////////////////////////////////////////////////////////////////////////
#pragma once
#include "GLFW/glfw3.h"
#include <glad/glad.h>
#include <string>
#include <glm/glm.hpp>
#include "camera/player_camera.h"
class FSize
{
public:
	FSize() {}
	FSize(GLuint _w, GLuint _h) { cx = _w, cy = _h; }
public:
	GLuint cx = 0;
	GLuint cy = 0;
};
struct FInfoWindow
{
	//窗口尺寸
	FSize size = FSize(800, 600);
	//窗口标题
	std::string title = "Lesson 13";

	//窗口指针
	GLFWwindow* p = nullptr;
};
struct FInfoFrame
{
	//背景颜色
	glm::vec4 clrBk = glm::vec4(0.f, 0.f, 0.f, 1.f);
	//FPS限制
	GLdouble fpsLimit = 60.;
	//点光源阴影贴图分辨率
	GLsizei rswd = 1500;
	//平行光源阴影贴图分辨率
	glm::ivec2 rswp = glm::ivec2(1500, 1500);
	//实际FPS
	GLdouble fps = 0.;
};
struct FInfoCursor
{
	//光标有效性
	bool focus = false;
	//光标第一次进入窗口
	bool first = true;
	//之前光标位置
	GLdouble prevX = 0., prevY = 0.;
	//光标灵敏度
	GLdouble sensitivity = .2f;
};

//窗口信息
FInfoWindow infWnd;
//帧信息
FInfoFrame infFrame;
//鼠标信息
FInfoCursor infCursor;

//摄像机
FPlayerCamera cmr;
bool spot;
static GLdouble frameid;

//////////////////////////////////////////////////////////////////////////////
void callback_framebufferSize(GLFWwindow* _w, int _wt, int _ht);
void callback_mouseMove(GLFWwindow* _w, double _xpos, double _ypos);
void callback_mouseButton(GLFWwindow* _w, int _button, int _action, int _mods);
void callback_key(GLFWwindow* _w, int _key, int _scancode, int _action, int _mods);
//////////////////////////////////////////////////////////////////////////////
//点
float data_points[] =
{
	0.,5.,0.,
	0.,15.,0.,
};
//平面
float data_plane[] =
{
	-20.,-2.,-20.,	5.,0., 0.,1.,0.,
	20.,-2.,-20.,	0.,0.,	0.,1.,0.,
	20.,-2.,20.,	0.,5.,	0.,1.,0.,
	-20.,-2.,20.,	5.,5., 0.,1.,0.,
};
//平面
unsigned indices_plane[] =
{
	0,1,2,
	0,2,3
};
//三角形
float data_triangle[] =
{
	-.5,-.5,0.,
	0.,.5,0.,
	.5,-.5,0.
};
//坐标轴
float data_axes[] =
{
	0.,0.,0.,  1.,0.,0.,1.,
	10.,0.,0., 1.,0.,0.,1.,
	0.,0.,0.,  0.,1.,0.,1.,
	0.,10.,0., 0.,1.,0.,1.,
	0.,0.,0.,  0.,0.,1.,1.,
	0.,0.,10., 0.,0.,1.,1.
};
//摄像机坐标轴
float data_cmrAxes[] =
{
	0.,0.,0.,  1.,0.,0.,1.,
	10.,0.,0., 1.,0.,0.,1.,
	0.,0.,0.,  0.,1.,0.,1.,
	0.,10.,0., 0.,1.,0.,1.,
	0.,0.,0.,  0.,0.,1.,1.,
	0.,0.,10., 0.,0.,1.,1.
};
//网格
float data_grids[] =
{
	-50.,0.,-50.,	1.,1.,1.,
	50.,0.,-50.,	1.,1.,1.,
	-50.,0.,-40.,	1.,1.,1.,
	50.,0.,-40.,	1.,1.,1.,
	-50.,0.,-30.,	1.,1.,1.,
	50.,0.,-30.,	1.,1.,1.,
	-50.,0.,-20.,	1.,1.,1.,
	50.,0.,-20.,	1.,1.,1.,
	-50.,0.,-10.,	1.,1.,1.,
	50.,0.,-10.,	1.,1.,1.,
	-50.,0.,0.,		1.,1.,1.,
	50.,0.,0.,		1.,1.,1.,
	-50.,0.,10.,	1.,1.,1.,
	50.,0.,10.,		1.,1.,1.,
	-50.,0.,20.,	1.,1.,1.,
	50.,0.,20.,		1.,1.,1.,
	-50.,0.,30.,	1.,1.,1.,
	50.,0.,30.,		1.,1.,1.,
	-50.,0.,40.,	1.,1.,1.,
	50.,0.,40.,		1.,1.,1.,
	-50.,0.,50.,	1.,1.,1.,
	50.,0.,50.,		1.,1.,1.,

	-50.,0., -50.,	1.,1.,1.,
	-50.,0.,  50.,	1.,1.,1.,
	-40.,0., -50.,	1.,1.,1.,
	-40.,0.,  50.,	1.,1.,1.,
	-30.,0., -50.,	1.,1.,1.,
	-30.,0.,  50.,	1.,1.,1.,
	-20.,0., -50.,	1.,1.,1.,
	-20.,0.,  50.,	1.,1.,1.,
	-10.,0., -50.,	1.,1.,1.,
	-10.,0.,  50.,	1.,1.,1.,
	0.,	0., -50.,	1.,1.,1.,
	0.,	0., 50.,	1.,1.,1.,
	10.,0., -50.,	1.,1.,1.,
	10.,0.,	  50.,	1.,1.,1.,
	20.,0., -50.,	1.,1.,1.,
	20.,0.,	  50.,	1.,1.,1.,
	30.,0., -50.,	1.,1.,1.,
	30.,0.,	  50.,	1.,1.,1.,
	40.,0., -50.,	1.,1.,1.,
	40.,0.,	  50.,	1.,1.,1.,
	50.,0., -50.,	1.,1.,1.,
	50.,0.,	  50.,	1.,1.,1.,
};
//立方体1
float data_cube1[] =
{
	-0.5f, -0.5f, -0.5f,   0.0f, 0.0f, 	0.0f,  0.0f, -1.0f,
	 0.5f, -0.5f, -0.5f,   1.0f, 0.0f,	0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,   1.0f, 1.0f,	0.0f,  0.0f, -1.0f,
	 0.5f,  0.5f, -0.5f,   1.0f, 1.0f,	0.0f,  0.0f, -1.0f,
	-0.5f,  0.5f, -0.5f,   0.0f, 1.0f,	0.0f,  0.0f, -1.0f,
	-0.5f, -0.5f, -0.5f,   0.0f, 0.0f,	0.0f,  0.0f, -1.0f,

	-0.5f, -0.5f,  0.5f,   0.0f, 0.0f, 	0.0f,  0.0f, 1.0f,
	 0.5f, -0.5f,  0.5f,   1.0f, 0.0f,	0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,   1.0f, 1.0f,	0.0f,  0.0f, 1.0f,
	 0.5f,  0.5f,  0.5f,   1.0f, 1.0f,	0.0f,  0.0f, 1.0f,
	-0.5f,  0.5f,  0.5f,   0.0f, 1.0f,	0.0f,  0.0f, 1.0f,
	-0.5f, -0.5f,  0.5f,   0.0f, 0.0f,	0.0f,  0.0f, 1.0f,

	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,  -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f, -0.5f,  1.0f, 1.0f,  -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,  -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f, -0.5f,  0.0f, 1.0f,  -1.0f,  0.0f,  0.0f,
	-0.5f, -0.5f,  0.5f,  0.0f, 0.0f,  -1.0f,  0.0f,  0.0f,
	-0.5f,  0.5f,  0.5f,  1.0f, 0.0f,  -1.0f,  0.0f,  0.0f,

	 0.5f,  0.5f,  0.5f,   1.0f, 0.0f, 	1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,   1.0f, 1.0f,	1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,   0.0f, 1.0f,	1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,   0.0f, 1.0f,	1.0f,  0.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,   0.0f, 0.0f,	1.0f,  0.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,   1.0f, 0.0f,	1.0f,  0.0f,  0.0f,

	-0.5f, -0.5f, -0.5f,   0.0f, 1.0f, 0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f, -0.5f,   1.0f, 1.0f, 0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f, -1.0f,  0.0f,
	 0.5f, -0.5f,  0.5f,   1.0f, 0.0f, 0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f,  0.5f,   0.0f, 0.0f, 0.0f, -1.0f,  0.0f,
	-0.5f, -0.5f, -0.5f,   0.0f, 1.0f, 0.0f, -1.0f,  0.0f,

	-0.5f,  0.5f, -0.5f,   0.0f, 1.0f, 	0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f, -0.5f,   1.0f, 1.0f,	0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,   1.0f, 0.0f,	0.0f,  1.0f,  0.0f,
	 0.5f,  0.5f,  0.5f,   1.0f, 0.0f,	0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f,  0.5f,   0.0f, 0.0f,	0.0f,  1.0f,  0.0f,
	-0.5f,  0.5f, -0.5f,   0.0f, 1.0f,	0.0f,  1.0f,  0.0f
};
//立方体2
float data_cube2[] =
{
	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,

	-0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,

	-0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,

	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,

	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f, -0.5f, -0.5f, 1.0f,1.0f,1.0f,

	-0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	 0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f,  0.5f, 1.0f,1.0f,1.0f,
	-0.5f,  0.5f, -0.5f, 1.0f,1.0f,1.0f
};

const char* names_skybox[] =
{
	F_DIR_RES_SKYBOX"right.jpg",
	F_DIR_RES_SKYBOX"left.jpg",
	F_DIR_RES_SKYBOX"top.jpg",
	F_DIR_RES_SKYBOX"bottom.jpg",
	F_DIR_RES_SKYBOX"front.jpg",
	F_DIR_RES_SKYBOX"back.jpg"
};
